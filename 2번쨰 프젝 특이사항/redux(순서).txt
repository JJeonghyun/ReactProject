modulues 파일 생성 

'파일 분류기준'

container	: 기능을 구현하는 공간
components	: 기능의 매개변수들을 받아 html 형식으로 구현

user index: : 컨테이너들의 경로를 종합함




store
----------------------------------------------------------------------------------------------------------------------------------
1번 createStore(reducer,{},composeWidthDevTools) 함수구조로 선언
2번 "createStore,combineReducer" import로 추가
3번 "composeWithDevTools" import로 추가
4번 combineReducers({userInfoReducer,userDB: userDBreducer})  // 객체 형식으로 reducer를 각각 userInfo,userDB 로 선언한다.
-----------------------------------------------------------------------------------------------------------------------------------

4-1 [피드백] 각각마다 dispatch로 받은 action의 {목적: type, 데이터정보들: payload}가 다르다. action에 대해서 실행하는 목적에 따라서 state 정보들이 달라진다. 
as: import로 구조분해할당한 변수명이 겹쳤을때 사용하는데 , 구조분해할당으로 가져온 변수명이 import한 다른 구조분해할당 변수명이랑 겹친다면 as 뒤 변수명으로 대체하겠다.

as: as 전에 선언되는 값과 as뒤에 선언되는 값을 동일하게 취급하며, 선언되어 동작하는 객체의 내부값 또한 동일하게 인식한다. 
----------------------------------------------------------------------------------------------------------------------------------//


userDB
--------------------------------------------------------------------------------
1번 type을 액션으로 받음.
2번 action을 수행할 함수에 매개변수로 (userId,userPw, userName 등등) 구성요소를 넣어준다(받음).
3번 action 형식{type 과 payload형식으로  반환}
4번 export[ action, initialize , reducer]을 해주면서 
action: reducer(함수로)
initialize: 초기값으로
reducer:(state=initialize,action)=>{switch 형식으로 작성}
--------------------------------------------------------------------------------
[피드백] 
0번 export 하는 이유는 외부에서 받아 쓰려고
1번 회원가입 하는 목적은 변하지 않을꺼니까 고정된 값이다라고 선언한다.
2번 객체 형식으로 리턴해주는데 레지스트라는애는 3개의 매개변수를 받아서 2개의 키가 있는 객체를 반환해준다.
3번 예외 처리가 걸리면 state라고 명시된 값을 반환하고 ,예외처리에 걸리지 않았다면 | state를 원본을 그대로 가져가는 ... 방식으로  배열에 새로운 payload{userId,Pw,Name}를 담아 추가시킨다.|
------------------------------------------------------------------------------//



usrinfo
--------------------------------------------------------------------------------
1번 type :Login ,LogOut 큰 틀로 경로를 나누고
2번 login은 {|userId|,|userPw|,|userDB|} 를 type의 login 경로로 보낸다. 
3번 export[ reducer,action]을 해주면서 
action: reducer(함수로)
initialize: 초기값으로
reducer:(state=initialize,action)=>{switch(type) 형식으로 작성}
------------
0번 ()=>({})소괄호 안에 객체 형식을 return 해주는  구조
1번 tempuser 라는 변수에 find()로 돌려서 반환된 값중에 0(undifind)이면 실행을 하지않고 0이외의 값이 들어가면 아래구문의 조건식을 돌릴수 있음을 판단해준다.
 일치한 index가 담김(0이 아닌 다른수가 담김)


regist
--------------------------------------------------------------------------------
1번 action들을 type에 저장합니다(regist).
2번 regist(매개변수)=>(type과 payload로 매개변수 각각 적용)
3번 export로 action(요청),initialize(초기값),reducer(action 들을 실행할 함수) 를 내보내줌
------------------------------------------------------------------------------//


login, logout
--------------------------------------------------------------------------------
1번 action들을 type에 저장합니다.
2번 Login,logout 적용할 함수를 {type,payload}형식으로 const함
3번 export로 action(요청),initialize(초기값),reducer(action 들을 실행할 함수) 를 내보내줌
3번-1 보통 reducer들을 switch(case)로 구분지은다. 
-------------------------------------------------------------------------------//
logout 경로 ==  버튼 onClick 에서 -> 매개변수로 받아오는 container로 이동하고 -> action.|logout()|함수를 action에 담아서 dispatch를 통해 reducer함수로 store에 보내준다.

근데 const logOut은 Type.LoGOUT 이고, Type은 경로가 "user/logout" 이고 , switch: case에 TYPE.LOGOUT에 걸려서 return 초기값으로 걸려서 반환한다. 이 초기값을  store에 보내준다.



