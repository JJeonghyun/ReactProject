용어 정리
components	: 화면에 실제로 그려지는 컴포넌트를 담는 폴더
containers	: 리덕스 스토어와 컴포넌트를 이어주는 매개체
modules	: 리덕스의 State,Reducer를 정의한 파일들을 담는 폴더

액션(Action) : 상태 변화를 일으킬 때 참조하는 객체이다.
const mapActionToProps = (dispatch) => {   } 함수 사용
Action이라는 단어는 Event와 같아고 생각하면 된다.
dispatch 인수에서 Ruduce로 넘길 객체(type)를 정의한다.
Action이 실행되고 끝나면 type을 반환하는데 type은 Reduce로 전달된다.
---------------------------------------------------------------------------------------action
스토어(Store) : 애플리케이션의 상태 값들을 내장하고 있다.
state 값을 가지고 있다.
중앙에서 변수 관리 개념이라고 생각하면 된다.
리듀스에 의해서만 state의 값이 변경된다.
---------------------------------------------------------------------------------------store
리듀서(Reducer) : 상태를 변화시키는 로직이 있는 함수이다.
ex) export function reducer(state = {state : 10, age:100}, action)
Reducer 함수를 생성 할 때 살찐 에로우를 사용하지 않는다. 
Reducer 함수는 순수함수여야 한다. 결과 값을 출력 할 때는 파라미터 값에만 의존해야 하며, 언제나 같은 결과를 출력해야 한다.
Reducer에서 state를 사용한다면 반드시 state를 초기화 해야 한다.
Reducer에서 state의 변화가 일어난다.
값의 갱신은 반드시 reducer에서 해야 한다.
----------------------------------------------------------------------------------------reducer

State : 컴포넌트에 최종 출력하기 전 거치는 중간과정이다.
mpaStateToProps(state) 함수 사용 
state는 store에서 가져왔다 라고 생각하면 된다.
Store에 저장되어 있는 변수를 가져와서 최종 가공을 위한 목적으로 사용된다.
예를 들어, num:state.num*100 이라고 갱신을 하더라도 실제 num의 값은 갱신되지 않고 컴포넌트에 출력하는 값을 가공한 것이다.
중간 과정을 거치게 되면 중간 수정이 가능하다. 원화를 달러로 바꿀 수 있듯이 가지고 있는 원화를 실제로 출력을 할 때는 달러로 출력을 하게 되는 것이며, 원화는 변화지 않는다.
디스패치(dispatch) : 액션을 스토어에 전달하는 것을 의미한다.
------------------------------------------------------------------------------------------state

구독 : 스토어 값이 필요한 컴포넌트는 스토어를 구독한다.
리액트 컴포넌트에서 리덕스 스토어를 구독하는 작업은 후에 react-redux의 connect 함수가 대신 한다.
리덕스의 내장 함수를 사용하여 subscribe, unsubscribe 함수를 사용하여 구독 및 구독 취소를 할 수 있다
------------------------------------

class -> consumer 아예 연결을 해두는거 
Hook을  use{(),[]}외부에서 가져오는거

-------------------------------------
action , dispatch ,  reducer 					, store
요청내용 , 보내주는거 ,  액션을 수정되거나 결과를 만드는 함수         , 저장공간
기능이 구현이 되야한다.

action :|{type}:객체 |로 보내주는 형태, |{type,payload}:객체|로 보내주는 형태

Reducers : 
액션을 주면, 그 액션이 적용되어 수정되거나 아닌 결과를 만들어주는 함수,
reducer 안에서 시간에 따라서 변하는 결과가 들어가면 안됨

createStore : 
store.getState()는 state를 가져오는 함수
store.dispatch(액션),store.dispatch(액션생성자())


-----------------------------------------------------------\\

provider : 쓰면 처음 대문자면 무조건 
reducer: state를 받아서 반환해 주는 함수 state 를 받아서 old state => new state
state == usestate
()=>() return 을 생략해줄수 있다 한줄이면



---------
교양
----------
모름

